{"version":3,"sources":["webpack://date-picker/./src/docs/map_days.js","webpack://date-picker/./src/pages/map-days.js"],"names":["Doc","translate","language","otherProps","Code","localeImport","title","jsx","dangerouslySetInnerHTML","__html","style","color","mapDays","date","today","day","code","selectedDate","currentMonth","isSameDate","props","borderRadius","backgroundColor","month","index","fontWeight","border","description","includes","weekDay","className","Link","to","disabled","onClick","alert","hidden","newDate","DateObject","convert","persian","undefined","persian_fa","gregorian_en","children","display","flexDirection","padding","fontSize","textAlign","format","result","toDays","DatePickerWithTooltip","useState","data","setData","ref","useRef","containerStyle","position","onMouseOver","e","spanRect","target","getBoundingClientRect","calendarRect","current","querySelector","left","top","visible","onMouseLeave","boxShadow","transform","visibility","MapDays","pageContext","doc"],"mappings":"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","file":"component---src-pages-map-days-js-932c86a03b6a551ebe1a.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport DatePicker, { Calendar, DateObject } from \"../../../build/index\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport gregorian_en from \"react-date-object/locales/gregorian_en\";\r\nimport { Link } from \"gatsby\";\r\n\r\nexport default function Doc({\r\n  translate,\r\n  language,\r\n  otherProps,\r\n  Code,\r\n  localeImport,\r\n}) {\r\n  const description = {\r\n    title: \"Descriptions\",\r\n    jsx: (\r\n      <div>\r\n        <p>{translate(\"map_days_description_1\")}</p>\r\n        <p>{translate(\"map_days_description_2\")}</p>\r\n        <Code>\r\n          {`<DatePicker\r\n  mapDays={object => {\r\n    return { props }\r\n  }}\r\n/>`}\r\n        </Code>\r\n        <p>{translate(\"map_days_description_3\")}</p>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>{translate(\"Property\")}</th>\r\n              <th>{translate(\"Type\")}</th>\r\n              <th>{translate(\"Descriptions\")}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>date</td>\r\n              <td>DateObject</td>\r\n              <td>\r\n                <p>{translate(\"map_days_description_4\")}</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>today</td>\r\n              <td>DateObject</td>\r\n              <td></td>\r\n            </tr>\r\n            <tr>\r\n              <td>selectedDate</td>\r\n              <td>{translate(\"DateObject or Array\")}</td>\r\n              <td>\r\n                <p>{translate(\"map_days_description_5\")}</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>currentMonth</td>\r\n              <td>Object</td>\r\n              <td>\r\n                <div\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: `<p>${translate(\"map_days_description_6\")}</p>`,\r\n                  }}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>isSameDate</td>\r\n              <td>Function</td>\r\n              <td>\r\n                <p>{translate(\"map_days_description_7\")}</p>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <Code title=\"map_days_description_8\">\r\n          {`{ date, today, selectedDate, currentMonth, isSameDate }`}\r\n        </Code>\r\n        <p style={{ color: \"red\" }}>{translate(\"map_days_description_9\")}</p>\r\n        <Code title=\"map_days_description_10\">\r\n          {`<Calendar\r\n  mapDays={({ date, today }) => {\r\n    date.day = today.day\r\n  }}\r\n${\r\n  language === \"en\"\r\n    ? \"/>\"\r\n    : `  calendar={persian}\r\n  locale={persian_fa}\r\n/>`\r\n}`}\r\n        </Code>\r\n        <Calendar\r\n          mapDays={({ date, today }) => {\r\n            date.day = today.day;\r\n          }}\r\n          {...otherProps}\r\n        />\r\n        <p>{translate(\"map_days_description_11\")}</p>\r\n        <ul>\r\n          <li>disabled</li>\r\n          <li>hidden</li>\r\n        </ul>\r\n        <p>{translate(\"map_days_description_12\")}</p>\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  const style = {\r\n    title: \"Styling Days\",\r\n    code: `${localeImport}<DatePicker\r\n  mapDays={({ date, today, selectedDate, currentMonth, isSameDate }) => {\r\n    let props = {}\r\n    \r\n    props.style = {\r\n      borderRadius: \"3px\",\r\n      backgroundColor: date.month.index === currentMonth.index ? \"#ccc\" : \"\"\r\n    }\r\n\r\n    if (isSameDate(date, today)) props.style.color = \"green\"\r\n    if (isSameDate(date, selectedDate)) props.style = {\r\n      ...props.style,\r\n      color: \"#0074d9\",\r\n      backgroundColor: \"#a5a5a5\",\r\n      fontWeight: \"bold\",\r\n      border: \"1px solid #777\"\r\n    }\r\n\r\n    return props\r\n  }}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        mapDays={({ date, today, selectedDate, currentMonth, isSameDate }) => {\r\n          let props = {};\r\n\r\n          props.style = {\r\n            borderRadius: \"3px\",\r\n            backgroundColor:\r\n              date.month.index === currentMonth.index ? \"#ccc\" : \"\",\r\n          };\r\n\r\n          if (isSameDate(date, today)) props.style.color = \"green\";\r\n          if (isSameDate(date, selectedDate))\r\n            props.style = {\r\n              ...props.style,\r\n              color: \"#0074d9\",\r\n              backgroundColor: \"#a5a5a5\",\r\n              fontWeight: \"bold\",\r\n              border: \"1px solid #777\",\r\n            };\r\n\r\n          return props;\r\n        }}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const weekends = {\r\n    title: \"Styling Weekends\",\r\n    description: \"map_days_weekends\",\r\n    code: `${localeImport}<DatePicker\r\n  mapDays={({ date }) => {\r\n    let props = {}\r\n    let isWeekend = ${\r\n      language === \"en\"\r\n        ? \"[0, 6].includes(date.weekDay.index)\"\r\n        : \"date.weekDay.index === 6\"\r\n    }\r\n    \r\n    if (isWeekend) props.className = \"highlight highlight-red\"\r\n    \r\n    return props\r\n  }}\r\n/>`,\r\n    jsx: (\r\n      <>\r\n        <DatePicker\r\n          mapDays={({ date }) => {\r\n            let props = {};\r\n            let isWeekend = (language === \"en\" ? [0, 6] : [6]).includes(\r\n              date.weekDay.index\r\n            );\r\n\r\n            if (isWeekend) props.className = \"highlight highlight-red\";\r\n\r\n            return props;\r\n          }}\r\n          {...otherProps}\r\n        />\r\n        <h4>{translate(\"See Also\")}:</h4>\r\n        <Link\r\n          to={\r\n            language === \"en\"\r\n              ? \"/plugins/weekends/#weekends:-gregorian\"\r\n              : \"../plugins/weekends/#%D8%A2%D8%AE%D8%B1-%D9%87%D9%81%D8%AA%D9%87-%D8%B4%D9%85%D8%B3%DB%8C\"\r\n          }\r\n        >\r\n          {language === \"en\"\r\n            ? \"plugins #weekends:-gregorian\"\r\n            : \"پلاگین ها #آخر هفته شمسی\"}\r\n        </Link>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  const highlight = {\r\n    title: \"Custom Highlight\",\r\n    code: `${localeImport}<DatePicker\r\n  mapDays={({ date }) => {\r\n    let color\r\n    \r\n    if ([4, 5, 6, 7].includes(date.day)) color = \"green\"\r\n    if ([11, 12, 13, 14].includes(date.day)) color = \"red\"\r\n    \r\n    if (color) return { className: \"highlight highlight-\" + color }\r\n  }}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        mapDays={({ date }) => {\r\n          let color;\r\n\r\n          if ([4, 5, 6, 7].includes(date.day)) color = \"green\";\r\n          if ([11, 12, 13, 14].includes(date.day)) color = \"red\";\r\n\r\n          if (color) return { className: `highlight highlight-${color}` };\r\n        }}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const disable = {\r\n    title: \"Disabling Days\",\r\n    code: `${localeImport}<DatePicker\r\n  mapDays={({ date }) => {\r\n    let isWeekend = [0, 6].includes(date.weekDay.index)\r\n    \r\n    if (isWeekend) return {\r\n      disabled: true,\r\n      style: { color: \"#ccc\" },\r\n      onClick: () => alert(\"${translate(\"weekends are disabled\")}\")\r\n    }\r\n  }}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        mapDays={({ date }) => {\r\n          let isWeekend = [0, 6].includes(date.weekDay.index);\r\n\r\n          if (isWeekend)\r\n            return {\r\n              disabled: true,\r\n              style: { color: \"#ccc\" },\r\n              onClick: () => alert(translate(\"weekends are disabled\")),\r\n            };\r\n        }}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const hide = {\r\n    title: \"Hiding Days\",\r\n    code: `${localeImport}<DatePicker\r\n  mapDays={({ date }) => {\r\n    let props = {}\r\n    \r\n    if ([5, 10, 15, 20, 25].includes(date.day)) props.hidden = true\r\n    \r\n    return props\r\n  }}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        mapDays={({ date }) => {\r\n          let props = {};\r\n\r\n          if ([5, 10, 15, 20, 25].includes(date.day)) props.hidden = true;\r\n\r\n          return props;\r\n        }}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const children = {\r\n    title: \"Multiple Day-Numbers With Different Calendars & Locales\",\r\n    description: (\r\n      <>\r\n        <p>{translate(\"children\")}</p>\r\n        <Code>\r\n          {`import persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";${\r\n            language === \"en\"\r\n              ? \"\"\r\n              : `\r\nimport gregorian_en from \"react-date-object/locales/gregorian_en\";`\r\n          }\r\n.\r\n.\r\n.          \r\n<Calendar\r\n  className=\"multi-locale-days\"\r\n  mapDays={({ date }) => {\r\n    const newDate = new DateObject(date).convert(${\r\n      language === \"en\" ? \"persian\" : \"undefined\"\r\n    }, ${language === \"en\" ? \"persian_fa\" : \"gregorian_en\"})\r\n\r\n    return {\r\n      children: (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            padding: \"0 10px\",\r\n            fontSize: \"11px\",\r\n          }}\r\n        >\r\n          <div style={{ textAlign: \"start\" }}>{date.format(\"D\")}</div>\r\n          <div style={{ textAlign: \"end\" }}>{newDate.format(\"D\")}</div>\r\n        </div>\r\n      ),\r\n    };\r\n  }}\r\n${\r\n  language === \"en\"\r\n    ? \"/>\"\r\n    : `  calendar={persian}\r\n  locale={persian_fa}\r\n/>`\r\n}`}\r\n        </Code>\r\n        <Code title=\"style.css\" className=\"language-css\">\r\n          {`.multi-locale-days .rmdp-day {\r\n  width: 40px;\r\n  height: 40px;\r\n}`}\r\n        </Code>\r\n      </>\r\n    ),\r\n    jsx: (\r\n      <Calendar\r\n        className=\"multi-locale-days\"\r\n        mapDays={({ date }) => {\r\n          const newDate = new DateObject(date).convert(\r\n            language === \"en\" ? persian : undefined,\r\n            language === \"en\" ? persian_fa : gregorian_en\r\n          );\r\n\r\n          return {\r\n            children: (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  padding: \"0 10px\",\r\n                  fontSize: \"11px\",\r\n                }}\r\n              >\r\n                <div style={{ textAlign: \"start\" }}>{date.format(\"D\")}</div>\r\n                <div style={{ textAlign: \"end\" }}>{newDate.format(\"D\")}</div>\r\n              </div>\r\n            ),\r\n          };\r\n        }}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const title = {\r\n    title: \"Adding Tiltle to Days\",\r\n    description: \"map_days_title\",\r\n    code: `${localeImport}<DatePicker\r\n  mapDays={({ date, today }) => {\r\n    let props = {}\r\n    let result = date.toDays() - today.toDays()\r\n    \r\n    if (result === -1) props.title = \"${translate(\"Yesterday\")}\"\r\n    if (result === 0) props.title = \"${translate(\"Today\")}\"\r\n    if (result === 1) props.title = \"${translate(\"Tomorrow\")}\"\r\n    \r\n    return props\r\n  }}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        mapDays={({ date, today }) => {\r\n          let props = {};\r\n          let result = date.toDays() - today.toDays();\r\n\r\n          if (result === -1) props.title = translate(\"Yesterday\");\r\n          if (result === 0) props.title = translate(\"Today\");\r\n          if (result === 1) props.title = translate(\"Tomorrow\");\r\n\r\n          return props;\r\n        }}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const tooltip = {\r\n    title: \"Custom Tooltip\",\r\n    description: \"tooltip\",\r\n    code: `import React, { useState, useRef } from \"react\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\n${\r\n  language === \"en\"\r\n    ? \"\"\r\n    : `import persian from \"react-date-object/calendars/persian:\r\nimport persian_fa from \"react-date-object/locales/persian_fa\"\r\n`\r\n}\r\nexport default function Example(){\r\n  return <DatePickerWithTooltip />\r\n}\r\n\r\nfunction DatePickerWithTooltip() {\r\n  const [data, setData] = useState({});\r\n  const ref = useRef();\r\n\r\n  return (\r\n    <>\r\n      <DatePicker\r\n        ref={ref}\r\n        containerStyle={{ position: \"relative\" }}\r\n        mapDays={({ date, today }) => {\r\n          let result = date.toDays() - today.toDays();\r\n          let title;\r\n\r\n          if (result === -1) title = \"Yesterday\";\r\n          if (result === 0) title = \"Today\";\r\n          if (result === 1) title = \"Tomorrow\";\r\n\r\n          return {\r\n            onMouseOver: (e) => {\r\n              let spanRect = e.target.getBoundingClientRect();\r\n              let calendarRect = ref.current\r\n                .querySelector(\".rmdp-wrapper\")\r\n                .getBoundingClientRect();\r\n\r\n              setData({\r\n                ...data,\r\n                left: spanRect.left - calendarRect.left,\r\n                top: spanRect.top - calendarRect.top,\r\n                visible: title ? true : false,\r\n                title,\r\n              });\r\n            },\r\n            onMouseLeave: () => {\r\n              setData({\r\n                ...data,\r\n                visible: false,\r\n                title,\r\n              });\r\n            },\r\n          };\r\n        }}\r\n      ${\r\n        language === \"en\"\r\n          ? \">\"\r\n          : `  calendar={persian}\r\n        locale={persian_fa}\r\n        calendarPosition=\"bottom-right\"\r\n      >`\r\n      }\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            backgroundColor: \"white\",\r\n            border: \"1px solid #ccc\",\r\n            boxShadow: \"0 0 5px #ccc\",\r\n            borderRadius: \"5px\",\r\n            padding: \"3px 5px\",\r\n            fontSize: \"14px\",\r\n            transform: ${\"`\"}translate($${\"{data.left\"}}px, $${\"{data.top + 30\"}}px)${\"`\"},\r\n            visibility: data.visible ? \"visible\" : \"hidden\",\r\n          }}\r\n        >\r\n          {data.title}\r\n        </span>\r\n      </DatePicker>\r\n    </>\r\n  );\r\n}`,\r\n    jsx: <DatePickerWithTooltip {...otherProps} />,\r\n  };\r\n\r\n  return [\r\n    description,\r\n    style,\r\n    weekends,\r\n    highlight,\r\n    disable,\r\n    hide,\r\n    children,\r\n    title,\r\n    tooltip,\r\n  ];\r\n}\r\n\r\nfunction DatePickerWithTooltip(props) {\r\n  const [data, setData] = useState({});\r\n  const ref = useRef();\r\n\r\n  return (\r\n    <>\r\n      <DatePicker\r\n        ref={ref}\r\n        containerStyle={{ position: \"relative\" }}\r\n        mapDays={({ date, today }) => {\r\n          let result = date.toDays() - today.toDays();\r\n          let title;\r\n\r\n          if (result === -1) title = \"Yesterday\";\r\n          if (result === 0) title = \"Today\";\r\n          if (result === 1) title = \"Tomorrow\";\r\n\r\n          return {\r\n            onMouseOver: (e) => {\r\n              let spanRect = e.target.getBoundingClientRect();\r\n              let calendarRect = ref.current\r\n                .querySelector(\".rmdp-wrapper\")\r\n                .getBoundingClientRect();\r\n\r\n              setData({\r\n                ...data,\r\n                left: spanRect.left - calendarRect.left,\r\n                top: spanRect.top - calendarRect.top,\r\n                visible: title ? true : false,\r\n                title,\r\n              });\r\n            },\r\n            onMouseLeave: () => {\r\n              setData({\r\n                ...data,\r\n                visible: false,\r\n                title,\r\n              });\r\n            },\r\n          };\r\n        }}\r\n        {...props}\r\n      >\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            backgroundColor: \"white\",\r\n            border: \"1px solid #ccc\",\r\n            boxShadow: \"0 0 5px #ccc\",\r\n            borderRadius: \"5px\",\r\n            padding: \"3px 5px\",\r\n            fontSize: \"14px\",\r\n            transform: `translate(${data.left}px, ${data.top + 30}px)`,\r\n            visibility: data.visible ? \"visible\" : \"hidden\",\r\n          }}\r\n        >\r\n          {data.title}\r\n        </span>\r\n      </DatePicker>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Layout from \"../components/layout/layout\";\r\nimport doc from \"../docs/map_days\";\r\n\r\nexport default function MapDays({ pageContext }) {\r\n  const language = pageContext.language || \"en\";\r\n\r\n  return <Layout language={language} doc={doc} />;\r\n}\r\n"],"sourceRoot":""}