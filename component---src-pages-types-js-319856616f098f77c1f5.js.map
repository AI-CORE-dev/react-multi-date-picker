{"version":3,"sources":["webpack://date-picker/./src/docs/types.js","webpack://date-picker/./src/pages/types.js"],"names":["Types","translate","language","otherProps","singleDescription","title","jsx","input","code","type","inputIcon","value","render","stringDate","openCalendar","onClick","CustomComponent","description","CustomInput","multiple","CustomMultipleInput","range","eachDaysInRange","CustomRangeInput","stringDates","from","to","onFocus","readOnly","join","this","props","React","handleValueChange","onChange","pageContext","doc"],"mappings":"uMAGe,SAASA,EAAMC,EAAWC,EAAUC,GACjD,IAAMC,EAAoB,CACxBC,MAAO,QACPC,IACE,0BACE,6CACA,wCACA,oCACA,kCACA,sCAKAC,EAAQ,CACZF,MAAO,QACPG,KAAK,mCAGLF,IAAK,gBAAC,KAAD,eAAYG,KAAK,SAAYN,KAG9BO,EAAY,CAChBL,MAAO,aACPG,KAAK,yCAGLF,IAAK,gBAAC,KAAD,eAAYG,KAAK,cAAiBN,KA0KzC,MAAO,CACLC,EACAG,EAzKa,CACbF,MAAO,SACPG,KAAK,oCAGLF,IAAK,gBAAC,KAAD,eAAYG,KAAK,UAAaN,KAsKnCO,EAnKW,CACXL,MAAO,OACPG,KAAK,mCAGLF,IAAK,gBAAC,KAAD,eAAYG,KAAK,QAAWN,KAGZ,CACrBE,MAAO,oBACPG,KAAK,6MAWLF,IACE,gBAAC,KAAD,eACEK,MAAM,aACNF,KAAK,SACLG,OAAQ,SAACC,EAAYC,GACnB,OAAO,0BAAQC,QAASD,GAAeD,KAErCV,KAKc,CACtBE,MAAO,qBACPG,KAAK,uUAqBLF,IACE,gBAAC,KAAD,eACEK,MAAM,aACNF,KAAK,SACLG,OAAQ,gBAACI,EAAD,OACJb,KAKmB,CAC3BE,MAAO,iBACPY,YAAa,eACbT,KAAK,2SAgBLF,IAAK,gBAAC,KAAD,eAAYG,KAAK,SAASG,OAAQ,gBAACM,EAAD,OAAqBf,KAElC,CAC1BE,MAAO,mBACPY,YAAa,kBAEE,CACfZ,MAAO,yBACPG,KAAK,2SAiBLF,IACE,gBAAC,KAAD,eACEa,UAAQ,EACRV,KAAK,SACLG,OAAQ,gBAACQ,EAAD,OACJjB,KAKI,CACZE,MAAO,sBACPG,KAAK,0LAMQ,OAAbN,EAAA,gEANI,0NA0BJI,IACE,gBAAC,KAAD,eACEe,OAAK,EACLC,iBAAe,EACfb,KAAK,SACLG,OAAQ,gBAACW,EAAD,OACJpB,MAmBV,SAASoB,EAAT,GAA0D,IAA9BT,EAA6B,EAA7BA,aAAcU,EAAe,EAAfA,YACpCC,EAAOD,EAAY,IAAM,GACzBE,EAAKF,EAAY,IAAM,GACvBb,EACFc,GAAQC,EACS,OAAbxB,EAAA,QACUuB,EADV,QACsBC,EADtB,MAEQD,EAFR,QAEoBC,EACpBD,EAEN,OAAO,yBAAOE,QAASb,EAAcH,MAAOA,EAAOiB,UAAQ,KAI/D,SAASR,EAAT,GAA6D,IAA9BN,EAA6B,EAA7BA,aAAcU,EAAe,EAAfA,YAC3C,OACE,yBAAOG,QAASb,EAAcH,MAAOa,EAAYK,KAAK,MAAOD,UAAQ,I,IAInEZ,E,6FACJJ,OAAA,WACE,OACE,0BAAQG,QAASe,KAAKC,MAAMjB,cAAegB,KAAKC,MAAMlB,a,GAH9BmB,aAQ9B,SAASd,EAAT,GAAuE,IAAhDJ,EAA+C,EAA/CA,aAAcD,EAAiC,EAAjCA,WAAYoB,EAAqB,EAArBA,kBAC/C,OACE,yBACEN,QAASb,EACTH,MAAOE,EACPqB,SAAUD,ICnPD,SAASjC,EAAT,GAAiC,IACxCE,EADuC,EAAfiC,YACDjC,UAAY,KAEzC,OAAO,gBAAC,IAAD,CAAQA,SAAUA,EAAUkC,IAAKA","file":"component---src-pages-types-js-319856616f098f77c1f5.js","sourcesContent":["import React from \"react\";\r\nimport DatePicker from \"../../../build/index\";\r\n\r\nexport default function Types(translate, language, otherProps) {\r\n  const singleDescription = {\r\n    title: \"Types\",\r\n    jsx: (\r\n      <ul>\r\n        <li>input (default)</li>\r\n        <li>input-icon</li>\r\n        <li>button</li>\r\n        <li>icon</li>\r\n        <li>custom</li>\r\n      </ul>\r\n    ),\r\n  };\r\n\r\n  const input = {\r\n    title: \"Input\",\r\n    code: `<DatePicker \r\n  type=\"input\"\r\n/>`,\r\n    jsx: <DatePicker type=\"input\" {...otherProps} />,\r\n  };\r\n\r\n  const inputIcon = {\r\n    title: \"Input-Icon\",\r\n    code: `<DatePicker \r\n  type=\"input-icon\" \r\n/>`,\r\n    jsx: <DatePicker type=\"input-icon\" {...otherProps} />,\r\n  };\r\n\r\n  const button = {\r\n    title: \"Button\",\r\n    code: `<DatePicker \r\n  type=\"button\"\r\n/>`,\r\n    jsx: <DatePicker type=\"button\" {...otherProps} />,\r\n  };\r\n\r\n  const icon = {\r\n    title: \"Icon\",\r\n    code: `<DatePicker \r\n  type=\"icon\" \r\n/>`,\r\n    jsx: <DatePicker type=\"icon\" {...otherProps} />,\r\n  };\r\n\r\n  const customFunction = {\r\n    title: \"Custom (function)\",\r\n    code: `<DatePicker\r\n  value=\"2020/10/19\"\r\n  type=\"custom\"\r\n  render={(stringDate, openCalendar) => {\r\n    return (\r\n      <button onClick={openCalendar}>\r\n        {stringDate}\r\n      </button>\r\n    )\r\n  }}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        value=\"2020/10/19\"\r\n        type=\"custom\"\r\n        render={(stringDate, openCalendar) => {\r\n          return <button onClick={openCalendar}>{stringDate}</button>;\r\n        }}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const customComponent = {\r\n    title: \"Custom (component)\",\r\n    code: `import React from \"react\"\r\n.\r\n.\r\n.\r\nclass CustomComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <button onClick={this.props.openCalendar}>\r\n        {this.props.stringDate}\r\n      </button >\r\n    )\r\n  }\r\n}\r\n.\r\n.\r\n.\r\n<DatePicker\r\n  value=\"2020/10/19\"\r\n  type=\"custom\"\r\n  render={<CustomComponent />}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        value=\"2020/10/19\"\r\n        type=\"custom\"\r\n        render={<CustomComponent />}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const customComponentInput = {\r\n    title: \"Custom (input)\",\r\n    description: \"custom_input\",\r\n    code: `import React from \"react\"\r\n\r\nfunction CustomInput({ openCalendar, stringDate, handleValueChange }) {\r\n  return (\r\n    <input\r\n      onFocus={openCalendar}\r\n      value={stringDate}\r\n      onChange={handleValueChange}\r\n    />\r\n  )\r\n}\r\n\r\n<DatePicker\r\n  type=\"custom\"\r\n  render={<CustomInput />}\r\n/>`,\r\n    jsx: <DatePicker type=\"custom\" render={<CustomInput />} {...otherProps} />,\r\n  };\r\n  const multipleDescription = {\r\n    title: \"Multiple & Range\",\r\n    description: \"multiple_range\",\r\n  };\r\n  const multiple = {\r\n    title: \"Custom (multiple mode)\",\r\n    code: `import React from \"react\"\r\n\r\nfunction CustomMultipleInput({openCalendar, stringDates}) {\r\n  return (\r\n    <input\r\n      onFocus={openCalendar}\r\n      value={stringDates.join(\", \")}\r\n      readOnly\r\n    />\r\n  )\r\n}\r\n\r\n<DatePicker\r\n  multiple\r\n  type=\"custom\"\r\n  render={<CustomMultipleInput />}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        multiple\r\n        type=\"custom\"\r\n        render={<CustomMultipleInput />}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const range = {\r\n    title: \"Custom (range mode)\",\r\n    code: `import React from \"react\"\r\n\r\nfunction CustomRangeInput({openCalendar, stringDates}) {\r\n  let from = stringDates[0] || \"\"\r\n  let to = stringDates[1] || \"\"\r\n  let value = from && to ? ${\r\n    language === \"en\"\r\n      ? `\"from \" + from + \", to \" + to`\r\n      : `\"از \" + from + \"، تا \" + to\"`\r\n  } : from\r\n  \r\n  return (\r\n    <input\r\n      onFocus={openCalendar}\r\n      value={value}\r\n      readOnly\r\n    />\r\n  )\r\n}\r\n\r\n<DatePicker\r\n  range\r\n  eachDaysInRange\r\n  type=\"custom\"\r\n  render={<CustomRangeInput />}\r\n/>`,\r\n    jsx: (\r\n      <DatePicker\r\n        range\r\n        eachDaysInRange\r\n        type=\"custom\"\r\n        render={<CustomRangeInput />}\r\n        {...otherProps}\r\n      />\r\n    ),\r\n  };\r\n\r\n  return [\r\n    singleDescription,\r\n    input,\r\n    button,\r\n    inputIcon,\r\n    icon,\r\n    customFunction,\r\n    customComponent,\r\n    customComponentInput,\r\n    multipleDescription,\r\n    multiple,\r\n    range,\r\n  ];\r\n\r\n  function CustomRangeInput({ openCalendar, stringDates }) {\r\n    let from = stringDates[0] || \"\";\r\n    let to = stringDates[1] || \"\";\r\n    let value =\r\n      from && to\r\n        ? language === \"en\"\r\n          ? `from ${from}, to ${to}`\r\n          : `از ${from}، تا ${to}`\r\n        : from;\r\n\r\n    return <input onFocus={openCalendar} value={value} readOnly />;\r\n  }\r\n}\r\n\r\nfunction CustomMultipleInput({ openCalendar, stringDates }) {\r\n  return (\r\n    <input onFocus={openCalendar} value={stringDates.join(\", \")} readOnly />\r\n  );\r\n}\r\n\r\nclass CustomComponent extends React.Component {\r\n  render() {\r\n    return (\r\n      <button onClick={this.props.openCalendar}>{this.props.stringDate}</button>\r\n    );\r\n  }\r\n}\r\n\r\nfunction CustomInput({ openCalendar, stringDate, handleValueChange }) {\r\n  return (\r\n    <input\r\n      onFocus={openCalendar}\r\n      value={stringDate}\r\n      onChange={handleValueChange}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Layout from \"../components/layout/layout\";\r\nimport doc from \"../docs/types\";\r\n\r\nexport default function Types({ pageContext }) {\r\n  const language = pageContext.language || \"en\";\r\n\r\n  return <Layout language={language} doc={doc} />;\r\n}\r\n"],"sourceRoot":""}