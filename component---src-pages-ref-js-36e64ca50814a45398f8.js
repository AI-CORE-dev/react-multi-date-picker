(self.webpackChunkdate_picker=self.webpackChunkdate_picker||[]).push([[104],{7275:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return c}});var a=t(7294),r=t(316),o=t(7821);function l(e,n,t){var r,l=(0,a.useRef)(),c=(0,a.useRef)(),s=(0,a.useRef)(),i=(0,a.useState)(!1),u=i[0],d=i[1],f=(0,a.useState)(!1),m=f[0],h=f[1],p=(0,a.useState)(!1),C=p[0],b=p[1],k=(0,a.useState)(!1),v=k[0],R=k[1],E=(0,a.useState)({month:new o.NT({calendar:"en"===n?"gregorian":"persian",locale:n}).month,year:new o.NT({calendar:"en"===n?"gregorian":"persian",locale:n}).year}),g=E[0],y=E[1],S=(0,a.useRef)();return[{title:"Descriptions",description:"forward_ref_description",code:'import React, { useRef } from "react"\nimport { Calendar } from "react-multi-date-picker"\n\nexport default function Example() {\n  const calendarRef = useRef()\n\n  return (\n    <Calendar ref={calendarRef} />\n  )\n}'},{title:"Opene & Close Calendar By DatePicker Ref",description:"date_picker_ref",code:"const datePickerRef = useRef()\n.\n.\n.\n<div>\n  <button\n    onClick={() => datePickerRef.current.openCalendar()}\n  >\n    "+e("open")+"\n  </button>\n  <DatePicker \n    ref={datePickerRef} \n"+("en"===n?"  >":'    calendar="persian"\n    locale="fa"\n    calendarPosition="auto-right"\n  >')+'\n    <button\n      style={{ margin: "5px" }}\n      onClick={() => datePickerRef.current.closeCalendar()}\n    >\n      '+e("close")+"\n    </button>\n  </DatePicker>\n</div>",jsx:a.createElement("div",null,a.createElement("button",{onClick:function(){return l.current.openCalendar()}},e("open")),a.createElement(o.ZP,Object.assign({ref:l},t),a.createElement("button",{style:{margin:"5px"},onClick:function(){return l.current.closeCalendar()}},e("close"))))},{title:"Refresh Position",description:"refresh_position",code:"const ref = useRef()\nconst ref2 = useRef()\nconst [visible, setVisible] = useState(false)\nconst [visible2, setVisible2] = useState(false)\nconst [shouldCloseCalendar, setShouldCloseCalendar] = useState(false)\nconst [shouldCloseCalendar2, setShouldCloseCalendar2] = useState(false)\n.\n.\n.\n<div>\n  <h2>"+e("Example 1 (without using refresh position)")+" :</h2>\n  {visible && <span>"+e("a demo text to force the datepicker to move forward!")+'</span>}\n  <DatePicker\n    value={{}}\n    placeholder="'+e("first click here")+'"\n    ref={ref}\n    onOpen={() => setShouldCloseCalendar(false)}\n    onClose={() => shouldCloseCalendar}\n  '+("en"===n?"/>":'  calendar="persian"\n    locale="fa"\n    calendarPosition="auto-right"\n  />')+'\n  <button\n    onClick={() => {\n      if (!visible) {\n        setVisible(true)\n      } else {\n        setVisible(false)\n        setShouldCloseCalendar(true)\n        setTimeout(() => {\n          ref.current.closeCalendar()\n        }, 20);\n      }\n    }}\n  >\n    {visible ? "'+e("refresh and close calendar")+'" : "'+e("then click here")+'"}\n  </button>\n  <h2>'+e("Example 2 (with using refresh position)")+" :</h2>\n  {visible2 && <span>"+e("a demo text to force the datepicker to move forward!")+'</span>}\n  <DatePicker\n    value={{}}\n    placeholder="'+e("first click here")+'"\n    ref={ref2}\n    onOpen={() => setShouldCloseCalendar2(false)}\n    onClose={() => shouldCloseCalendar2}\n  '+("en"===n?"/>":'  calendar="persian"\n    locale="fa"\n    calendarPosition="auto-right"\n  />')+'\n  <button\n    onClick={() => {\n      if (!visible2) {\n        setVisible2(true)\n        setTimeout(() => {\n          ref2.current.refreshPosition()\n        }, 20);\n      } else {\n        setVisible2(false)\n        setShouldCloseCalendar2(true)\n        setTimeout(() => {\n          ref2.current.closeCalendar()\n        }, 20);\n      }\n    }}\n  >\n    {visible2 ? "'+e("refresh and close calendar")+'" : "'+e("then click here")+'"}      \n  </button>\n</div>',jsx:a.createElement("div",null,a.createElement("h2",null,e("Example 1 (without using refresh position)")," :"),u&&a.createElement("span",null,e("a demo text to force the datepicker to move forward!")),a.createElement(o.ZP,Object.assign({value:{},placeholder:e("first click here"),ref:c,onOpen:function(){return b(!1)},onClose:function(){return C}},t)),a.createElement("button",{onClick:function(){u?(d(!1),b(!0),setTimeout((function(){c.current.closeCalendar()}),20)):d(!0)}},e(u?"refresh and close calendar":"then click here")),a.createElement("h2",null,e("Example 2 (with using refresh position)")," :"),m&&a.createElement("span",null,e("a demo text to force the datepicker to move forward!")),a.createElement(o.ZP,Object.assign({value:{},placeholder:e("first click here"),ref:s,onOpen:function(){return R(!1)},onClose:function(){return v}},t)),a.createElement("button",{onClick:function(){m?(h(!1),R(!0),setTimeout((function(){s.current.closeCalendar()}),20)):(h(!0),setTimeout((function(){s.current.refreshPosition()}),20))}},e(m?"refresh and close calendar":"then click here")," "))},{title:"Manually Set Year And Month In Calendar",description:"year_month_ref",code:'import React, { useRef, useState } from "react";\nimport { Calendar, DateObject } from "react-multi-date-picker";\n\nexport default function Example() {\n  const [state, setState] = useState({\n    month: new DateObject('+("en"===n?"":'{ calendar: "persian", locale: "fa" }')+").month,\n    year: new DateObject("+("en"===n?"":'{ calendar: "persian", locale: "fa" }')+').year,\n  });\n\n  const calendarRef = useRef();\n\n  return (\n    <>\n      <div>\n        <button\n          onClick={() => {\n            let date = calendarRef.current.date;\n\n            calendarRef.current.set("month", date.month.number + 1);\n\n            setState({ ...state, month: date.month });\n          }}\n        >\n          +\n        </button>\n        <span>{state.month?.name}</span>\n        <button\n          onClick={() => {\n            let date = calendarRef.current.date;\n\n            calendarRef.current.set("month", date.month.number - 1);\n\n            setState({ ...state, month: date.month });\n          }}\n        >\n          -\n        </button>\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            let date = calendarRef.current.date;\n\n            calendarRef.current.set("year", date.year + 1);\n\n            setState({ ...state, year: date.year });\n          }}\n        >\n          +\n        </button>\n        <span>{state.year}</span>\n        <button\n          onClick={() => {\n            let date = calendarRef.current.date;\n\n            calendarRef.current.set("year", date.year - 1);\n\n            setState({ ...state, year: date.year });\n          }}\n        >\n          -\n        </button>\n      </div>\n      <Calendar \n        ref={calendarRef} \n      '+("en"===n?"/>":'  calendar="persian" \n        locale="fa" \n      />')+"\n    </>\n  )\n}  ",jsx:a.createElement(a.Fragment,null,a.createElement("div",null,a.createElement("button",{onClick:function(){var e=S.current.date;S.current.set("month",e.month.number+1),y(Object.assign({},g,{month:e.month}))}},"+"),a.createElement("span",null,null===(r=g.month)||void 0===r?void 0:r.name),a.createElement("button",{onClick:function(){var e=S.current.date;S.current.set("month",e.month.number-1),y(Object.assign({},g,{month:e.month}))}},"-")),a.createElement("div",null,a.createElement("button",{onClick:function(){var e=S.current.date;S.current.set("year",e.year+1),y(Object.assign({},g,{year:e.year}))}},"+"),a.createElement("span",null,g.year),a.createElement("button",{onClick:function(){var e=S.current.date;S.current.set("year",e.year-1),y(Object.assign({},g,{year:e.year}))}},"-")),a.createElement(o.f,Object.assign({ref:S},t)))}]}function c(e){var n=e.pageContext.language||"en";return a.createElement(r.Z,{language:n,doc:l})}}}]);
//# sourceMappingURL=component---src-pages-ref-js-36e64ca50814a45398f8.js.map