{"version":3,"sources":["webpack://date-picker/./src/docs/ref.js","webpack://date-picker/./src/pages/ref.js"],"names":["Doc","translate","language","otherProps","localeImport","datePickerRef","useRef","ref","ref2","useState","visible","setVisible","visible2","setVisible2","shouldCloseCalendar","setShouldCloseCalendar","shouldCloseCalendar2","setShouldCloseCalendar2","DateObject","date","setDate","calendarRef","update","key","value","current","set","style","display","width","fontSize","title","description","code","jsx","onClick","openCalendar","margin","closeCalendar","placeholder","onOpen","onClose","setTimeout","refreshPosition","textAlign","month","name","year","className","Ref","pageContext","doc"],"mappings":"8LAGe,SAASA,EAAT,GAAiE,IAAlDC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,aACvDC,GAAgBC,cAChBC,GAAMD,cACNE,GAAOF,cACb,GAA8BG,eAAS,GAAhCC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,eAAS,GAAlCG,EAAP,KAAiBC,EAAjB,KACA,GAAsDJ,eAAS,GAAxDK,EAAP,KAA4BC,EAA5B,KACA,GAAwDN,eAAS,GAA1DO,EAAP,KAA6BC,EAA7B,KACA,GAAwBR,cAAS,IAAIS,KAAWf,IAAzCgB,EAAP,KAAaC,EAAb,KACMC,GAAcf,cAEpB,SAASgB,EAAOC,EAAKC,GACnB,IAAIL,EAAOE,EAAYI,QAAQN,KAE/BE,EAAYI,QAAQC,IAAIH,EAAKJ,EAAKI,GAAOC,GAEzCJ,EAAQ,IAAIF,KAAWC,IAGzB,IAAMQ,EAAQ,CACZC,QAAS,eACTC,MAAO,OACPC,SAAU,QA0SZ,MAAO,CAvSa,CAClBC,MAAO,eACPC,YAAa,0BACbC,KAAK,8NAYY,CACjBF,MAAO,0CACPC,YAAa,kBACbC,KAAS7B,EAAL,iIAQFH,EAAU,QARR,6DAaO,OAAbC,EACI,MADJ,6FAbM,6HAwBAD,EAAU,SAxBV,2CA4BJiC,IACE,2BACE,0BAAQC,QAAS,kBAAM9B,EAAcoB,QAAQW,iBAC1CnC,EAAU,SAEb,gBAAC,KAAD,eAAYM,IAAKF,GAAmBF,GAClC,0BACEwB,MAAO,CAAEU,OAAQ,OACjBF,QAAS,kBAAM9B,EAAcoB,QAAQa,kBAEpCrC,EAAU,aAOL,CACd8B,MAAO,mBACPC,YAAa,mBACbC,KAAS7B,EAAL,sTAUAH,EAAU,8CAVV,gCAWcA,EAClB,wDAZI,6DAgBWA,EAAU,oBAhBrB,mHAqBS,OAAbC,EACI,KADJ,4FArBI,kSAyCUD,EAAU,8BAzCpB,QAyCyDA,EAC3D,mBA1CE,0BA6CAA,EAAU,2CA7CV,iCA8CeA,EACnB,wDA/CI,6DAmDWA,EAAU,oBAnDrB,sHAwDS,OAAbC,EACI,KADJ,4FAxDI,+XA+EWD,EAAU,8BA/ErB,QA+E0DA,EAC5D,mBAhFE,gCAoFJiC,IACE,2BACE,0BAAKjC,EAAU,8CAAf,MACCS,GACC,4BACGT,EAAU,yDAGf,gBAAC,KAAD,eACEuB,MAAO,GACPe,YAAatC,EAAU,oBACvBM,IAAKA,EACLiC,OAAQ,kBAAMzB,GAAuB,IACrC0B,QAAS,kBAAM3B,IACXX,IAEN,0BACEgC,QAAS,WACFzB,GAGHC,GAAW,GACXI,GAAuB,GACvB2B,YAAW,WACTnC,EAAIkB,QAAQa,kBACX,KANH3B,GAAW,KAWXV,EADHS,EACa,6BACA,oBAEhB,0BAAKT,EAAU,2CAAf,MACCW,GACC,4BACGX,EAAU,yDAGf,gBAAC,KAAD,eACEuB,MAAO,GACPe,YAAatC,EAAU,oBACvBM,IAAKC,EACLgC,OAAQ,kBAAMvB,GAAwB,IACtCwB,QAAS,kBAAMzB,IACXb,IAEN,0BACEgC,QAAS,WACFvB,GAMHC,GAAY,GACZI,GAAwB,GACxByB,YAAW,WACTlC,EAAKiB,QAAQa,kBACZ,MATHzB,GAAY,GACZ6B,YAAW,WACTlC,EAAKiB,QAAQkB,oBACZ,OAWH1C,EADHW,EACa,6BACA,mBAAoB,OAM5B,CACZmB,MAAO,0CACPC,YAAa,iBACbC,KAAK,uHAGM,OAAb/B,EACI,GADJ,gIAHM,6FAWS,OAAbA,EAAoB,GAApB,6CAXI,o0BA6Ca,OAAbA,EACI,KADJ,+DA7CA,yBAsDJgC,IACE,uBAAKP,MAAO,CAAEiB,UAAW,WACvB,2BACE,0BAAQT,QAAS,kBAAMb,EAAO,QAAS,KAAvC,KACA,wBAAMK,MAAOA,GAAQR,EAAK0B,MAAMC,MAChC,0BAAQX,QAAS,kBAAMb,EAAO,SAAU,KAAxC,MAEF,2BACE,0BAAQa,QAAS,kBAAMb,EAAO,OAAQ,KAAtC,KACA,wBAAMK,MAAOA,GAAQR,EAAK4B,MAC1B,0BAAQZ,QAAS,kBAAMb,EAAO,QAAS,KAAvC,MAEF,gBAAC,IAAD,eAAUf,IAAKc,GAAiBlB,EAAhC,CAA4C6C,UAAU,qBC1T/C,SAASC,EAAT,GAA+B,IACtC/C,EADqC,EAAfgD,YACChD,UAAY,KAEzC,OAAO,gBAAC,IAAD,CAAQA,SAAUA,EAAUiD,IAAKA","file":"component---src-pages-ref-js-835017772e845c94e06c.js","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport DatePicker, { Calendar, DateObject } from \"../../../build/index\";\r\n\r\nexport default function Doc({ translate, language, otherProps, localeImport }) {\r\n  const datePickerRef = useRef();\r\n  const ref = useRef();\r\n  const ref2 = useRef();\r\n  const [visible, setVisible] = useState(false);\r\n  const [visible2, setVisible2] = useState(false);\r\n  const [shouldCloseCalendar, setShouldCloseCalendar] = useState(false);\r\n  const [shouldCloseCalendar2, setShouldCloseCalendar2] = useState(false);\r\n  const [date, setDate] = useState(new DateObject(otherProps));\r\n  const calendarRef = useRef();\r\n\r\n  function update(key, value) {\r\n    let date = calendarRef.current.date;\r\n\r\n    calendarRef.current.set(key, date[key] + value);\r\n\r\n    setDate(new DateObject(date));\r\n  }\r\n\r\n  const style = {\r\n    display: \"inline-block\",\r\n    width: \"90px\",\r\n    fontSize: \"16px\",\r\n  };\r\n\r\n  const description = {\r\n    title: \"Descriptions\",\r\n    description: \"forward_ref_description\",\r\n    code: `import React, { useRef } from \"react\"\r\nimport { Calendar } from \"react-multi-date-picker\"\r\n\r\nexport default function Example() {\r\n  const calendarRef = useRef()\r\n\r\n  return (\r\n    <Calendar ref={calendarRef} />\r\n  )\r\n}`,\r\n  };\r\n\r\n  const datePicker = {\r\n    title: \"Open & Close Calendar By DatePicker Ref\",\r\n    description: \"date_picker_ref\",\r\n    code: `${localeImport}const datePickerRef = useRef()\r\n.\r\n.\r\n.\r\n<div>\r\n  <button\r\n    onClick={() => datePickerRef.current.openCalendar()}\r\n  >\r\n    ${translate(\"open\")}\r\n  </button>\r\n  <DatePicker \r\n    ref={datePickerRef} \r\n${\r\n  language === \"en\"\r\n    ? \"  >\"\r\n    : `    calendar={persian}\r\n    locale={persian_fa}\r\n    calendarPosition=\"bottom-right\"\r\n  >`\r\n}\r\n    <button\r\n      style={{ margin: \"5px\" }}\r\n      onClick={() => datePickerRef.current.closeCalendar()}\r\n    >\r\n      ${translate(\"close\")}\r\n    </button>\r\n  </DatePicker>\r\n</div>`,\r\n    jsx: (\r\n      <div>\r\n        <button onClick={() => datePickerRef.current.openCalendar()}>\r\n          {translate(\"open\")}\r\n        </button>\r\n        <DatePicker ref={datePickerRef} {...otherProps}>\r\n          <button\r\n            style={{ margin: \"5px\" }}\r\n            onClick={() => datePickerRef.current.closeCalendar()}\r\n          >\r\n            {translate(\"close\")}\r\n          </button>\r\n        </DatePicker>\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  const refresh = {\r\n    title: \"Refresh Position\",\r\n    description: \"refresh_position\",\r\n    code: `${localeImport}const ref = useRef()\r\nconst ref2 = useRef()\r\nconst [visible, setVisible] = useState(false)\r\nconst [visible2, setVisible2] = useState(false)\r\nconst [shouldCloseCalendar, setShouldCloseCalendar] = useState(false)\r\nconst [shouldCloseCalendar2, setShouldCloseCalendar2] = useState(false)\r\n.\r\n.\r\n.\r\n<div>\r\n  <h2>${translate(\"Example 1 (without using refresh position)\")} :</h2>\r\n  {visible && <span>${translate(\r\n    \"a demo text to force the datepicker to move forward!\"\r\n  )}</span>}\r\n  <DatePicker\r\n    value={{}}\r\n    placeholder=\"${translate(\"first click here\")}\"\r\n    ref={ref}\r\n    onOpen={() => setShouldCloseCalendar(false)}\r\n    onClose={() => shouldCloseCalendar}\r\n  ${\r\n    language === \"en\"\r\n      ? \"/>\"\r\n      : `  calendar={persian}\r\n    locale={persian_fa}\r\n    calendarPosition=\"bottom-right\"\r\n  />`\r\n  }\r\n  <button\r\n    onClick={() => {\r\n      if (!visible) {\r\n        setVisible(true)\r\n      } else {\r\n        setVisible(false)\r\n        setShouldCloseCalendar(true)\r\n        setTimeout(() => {\r\n          ref.current.closeCalendar()\r\n        }, 20);\r\n      }\r\n    }}\r\n  >\r\n    {visible ? \"${translate(\"refresh and close calendar\")}\" : \"${translate(\r\n      \"then click here\"\r\n    )}\"}\r\n  </button>\r\n  <h2>${translate(\"Example 2 (with using refresh position)\")} :</h2>\r\n  {visible2 && <span>${translate(\r\n    \"a demo text to force the datepicker to move forward!\"\r\n  )}</span>}\r\n  <DatePicker\r\n    value={{}}\r\n    placeholder=\"${translate(\"first click here\")}\"\r\n    ref={ref2}\r\n    onOpen={() => setShouldCloseCalendar2(false)}\r\n    onClose={() => shouldCloseCalendar2}\r\n  ${\r\n    language === \"en\"\r\n      ? \"/>\"\r\n      : `  calendar={persian}\r\n    locale={persian_fa}\r\n    calendarPosition=\"bottom-right\"\r\n  />`\r\n  }\r\n  <button\r\n    onClick={() => {\r\n      if (!visible2) {\r\n        setVisible2(true)\r\n        setTimeout(() => {\r\n          ref2.current.refreshPosition()\r\n        }, 20);\r\n      } else {\r\n        setVisible2(false)\r\n        setShouldCloseCalendar2(true)\r\n        setTimeout(() => {\r\n          ref2.current.closeCalendar()\r\n        }, 20);\r\n      }\r\n    }}\r\n  >\r\n    {visible2 ? \"${translate(\"refresh and close calendar\")}\" : \"${translate(\r\n      \"then click here\"\r\n    )}\"}      \r\n  </button>\r\n</div>`,\r\n    jsx: (\r\n      <div>\r\n        <h2>{translate(\"Example 1 (without using refresh position)\")} :</h2>\r\n        {visible && (\r\n          <span>\r\n            {translate(\"a demo text to force the datepicker to move forward!\")}\r\n          </span>\r\n        )}\r\n        <DatePicker\r\n          value={{}}\r\n          placeholder={translate(\"first click here\")}\r\n          ref={ref}\r\n          onOpen={() => setShouldCloseCalendar(false)}\r\n          onClose={() => shouldCloseCalendar}\r\n          {...otherProps}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            if (!visible) {\r\n              setVisible(true);\r\n            } else {\r\n              setVisible(false);\r\n              setShouldCloseCalendar(true);\r\n              setTimeout(() => {\r\n                ref.current.closeCalendar();\r\n              }, 20);\r\n            }\r\n          }}\r\n        >\r\n          {visible\r\n            ? translate(\"refresh and close calendar\")\r\n            : translate(\"then click here\")}\r\n        </button>\r\n        <h2>{translate(\"Example 2 (with using refresh position)\")} :</h2>\r\n        {visible2 && (\r\n          <span>\r\n            {translate(\"a demo text to force the datepicker to move forward!\")}\r\n          </span>\r\n        )}\r\n        <DatePicker\r\n          value={{}}\r\n          placeholder={translate(\"first click here\")}\r\n          ref={ref2}\r\n          onOpen={() => setShouldCloseCalendar2(false)}\r\n          onClose={() => shouldCloseCalendar2}\r\n          {...otherProps}\r\n        />\r\n        <button\r\n          onClick={() => {\r\n            if (!visible2) {\r\n              setVisible2(true);\r\n              setTimeout(() => {\r\n                ref2.current.refreshPosition();\r\n              }, 20);\r\n            } else {\r\n              setVisible2(false);\r\n              setShouldCloseCalendar2(true);\r\n              setTimeout(() => {\r\n                ref2.current.closeCalendar();\r\n              }, 20);\r\n            }\r\n          }}\r\n        >\r\n          {visible2\r\n            ? translate(\"refresh and close calendar\")\r\n            : translate(\"then click here\")}{\" \"}\r\n        </button>\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  const month = {\r\n    title: \"Manually Set Year And Month In Calendar\",\r\n    description: \"year_month_ref\",\r\n    code: `import React, { useRef, useState } from \"react\";\r\nimport { Calendar, DateObject } from \"react-multi-date-picker\";\r\n${\r\n  language === \"en\"\r\n    ? \"\"\r\n    : `import persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\n`\r\n}\r\nexport default function Example() {\r\n  const [date, setDate] = useState(new DateObject(${\r\n    language === \"en\" ? \"\" : `{ calendar: persian, locale: persian_fa }`\r\n  }));\r\n\r\n  const calendarRef = useRef();\r\n\r\n  function update(key, value) {\r\n    let date = calendarRef.current.date;\r\n\r\n    calendarRef.current.set(key, date[key] + value);\r\n\r\n    setDate(new DateObject(date));\r\n  }\r\n\r\n  const style = {\r\n    display: \"inline-block\",\r\n    width: \"90px\",\r\n    fontSize: \"16px\",\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <div>\r\n        <button onClick={() => update(\"month\", 1)}>+</button>\r\n        <span style={style}>{date.month.name}</span>\r\n        <button onClick={() => update(\"month\", -1)}>-</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={() => update(\"year\", 1)}>+</button>\r\n        <span style={style}>{date.year}</span>\r\n        <button onClick={() => update(\"year\", -1)}>-</button>\r\n      </div>\r\n      <Calendar \r\n        ref={calendarRef}\r\n      ${\r\n        language === \"en\"\r\n          ? \"/>\"\r\n          : `  calendar={persian}\r\n        locale={persian_fa}\r\n      />`\r\n      }\r\n    </div>\r\n  )\r\n}  `,\r\n    jsx: (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <div>\r\n          <button onClick={() => update(\"month\", 1)}>+</button>\r\n          <span style={style}>{date.month.name}</span>\r\n          <button onClick={() => update(\"month\", -1)}>-</button>\r\n        </div>\r\n        <div>\r\n          <button onClick={() => update(\"year\", 1)}>+</button>\r\n          <span style={style}>{date.year}</span>\r\n          <button onClick={() => update(\"year\", -1)}>-</button>\r\n        </div>\r\n        <Calendar ref={calendarRef} {...otherProps} className=\"inline-block\" />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  return [description, datePicker, refresh, month];\r\n}\r\n","import React from \"react\";\r\nimport Layout from \"../components/layout/layout\";\r\nimport doc from \"../docs/ref\";\r\n\r\nexport default function Ref({ pageContext }) {\r\n  const language = pageContext.language || \"en\";\r\n\r\n  return <Layout language={language} doc={doc} />;\r\n}\r\n"],"sourceRoot":""}